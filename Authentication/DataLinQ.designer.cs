#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Authentication
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Role-Base Authentication")]
	public partial class DataLinQDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPermission(Permission instance);
    partial void UpdatePermission(Permission instance);
    partial void DeletePermission(Permission instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertRolePermission(RolePermission instance);
    partial void UpdateRolePermission(RolePermission instance);
    partial void DeleteRolePermission(RolePermission instance);
    partial void InsertUserAuthentication(UserAuthentication instance);
    partial void UpdateUserAuthentication(UserAuthentication instance);
    partial void DeleteUserAuthentication(UserAuthentication instance);
    partial void InsertUserRole(UserRole instance);
    partial void UpdateUserRole(UserRole instance);
    partial void DeleteUserRole(UserRole instance);
    partial void InsertApplicationRole(ApplicationRole instance);
    partial void UpdateApplicationRole(ApplicationRole instance);
    partial void DeleteApplicationRole(ApplicationRole instance);
    partial void InsertApplicationss(Applicationss instance);
    partial void UpdateApplicationss(Applicationss instance);
    partial void DeleteApplicationss(Applicationss instance);
    partial void InsertApplicationMenu(ApplicationMenu instance);
    partial void UpdateApplicationMenu(ApplicationMenu instance);
    partial void DeleteApplicationMenu(ApplicationMenu instance);
    #endregion
		
		public DataLinQDataContext() : 
				base(global::Authentication.Properties.Settings.Default.Role_Base_AuthenticationConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataLinQDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataLinQDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataLinQDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataLinQDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Permission> Permissions
		{
			get
			{
				return this.GetTable<Permission>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<RolePermission> RolePermissions
		{
			get
			{
				return this.GetTable<RolePermission>();
			}
		}
		
		public System.Data.Linq.Table<UserAuthentication> UserAuthentications
		{
			get
			{
				return this.GetTable<UserAuthentication>();
			}
		}
		
		public System.Data.Linq.Table<UserRole> UserRoles
		{
			get
			{
				return this.GetTable<UserRole>();
			}
		}
		
		public System.Data.Linq.Table<ApplicationRole> ApplicationRoles
		{
			get
			{
				return this.GetTable<ApplicationRole>();
			}
		}
		
		public System.Data.Linq.Table<Applicationss> Applicationsses
		{
			get
			{
				return this.GetTable<Applicationss>();
			}
		}
		
		public System.Data.Linq.Table<ApplicationMenu> ApplicationMenus
		{
			get
			{
				return this.GetTable<ApplicationMenu>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Permissions")]
	public partial class Permission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Permission_ID;
		
		private string _Permission_Name;
		
		private EntitySet<RolePermission> _RolePermissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPermission_IDChanging(string value);
    partial void OnPermission_IDChanged();
    partial void OnPermission_NameChanging(string value);
    partial void OnPermission_NameChanged();
    #endregion
		
		public Permission()
		{
			this._RolePermissions = new EntitySet<RolePermission>(new Action<RolePermission>(this.attach_RolePermissions), new Action<RolePermission>(this.detach_RolePermissions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Permission_ID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Permission_ID
		{
			get
			{
				return this._Permission_ID;
			}
			set
			{
				if ((this._Permission_ID != value))
				{
					this.OnPermission_IDChanging(value);
					this.SendPropertyChanging();
					this._Permission_ID = value;
					this.SendPropertyChanged("Permission_ID");
					this.OnPermission_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Permission_Name", DbType="VarChar(50)")]
		public string Permission_Name
		{
			get
			{
				return this._Permission_Name;
			}
			set
			{
				if ((this._Permission_Name != value))
				{
					this.OnPermission_NameChanging(value);
					this.SendPropertyChanging();
					this._Permission_Name = value;
					this.SendPropertyChanged("Permission_Name");
					this.OnPermission_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_RolePermission", Storage="_RolePermissions", ThisKey="Permission_ID", OtherKey="Permission_ID")]
		public EntitySet<RolePermission> RolePermissions
		{
			get
			{
				return this._RolePermissions;
			}
			set
			{
				this._RolePermissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RolePermissions(RolePermission entity)
		{
			this.SendPropertyChanging();
			entity.Permission = this;
		}
		
		private void detach_RolePermissions(RolePermission entity)
		{
			this.SendPropertyChanging();
			entity.Permission = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Role_ID;
		
		private string _Role_Name;
		
		private EntitySet<RolePermission> _RolePermissions;
		
		private EntitySet<UserRole> _UserRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRole_IDChanging(string value);
    partial void OnRole_IDChanged();
    partial void OnRole_NameChanging(string value);
    partial void OnRole_NameChanged();
    #endregion
		
		public Role()
		{
			this._RolePermissions = new EntitySet<RolePermission>(new Action<RolePermission>(this.attach_RolePermissions), new Action<RolePermission>(this.detach_RolePermissions));
			this._UserRoles = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRoles), new Action<UserRole>(this.detach_UserRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role_ID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Role_ID
		{
			get
			{
				return this._Role_ID;
			}
			set
			{
				if ((this._Role_ID != value))
				{
					this.OnRole_IDChanging(value);
					this.SendPropertyChanging();
					this._Role_ID = value;
					this.SendPropertyChanged("Role_ID");
					this.OnRole_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role_Name", DbType="VarChar(50)")]
		public string Role_Name
		{
			get
			{
				return this._Role_Name;
			}
			set
			{
				if ((this._Role_Name != value))
				{
					this.OnRole_NameChanging(value);
					this.SendPropertyChanging();
					this._Role_Name = value;
					this.SendPropertyChanged("Role_Name");
					this.OnRole_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RolePermission", Storage="_RolePermissions", ThisKey="Role_ID", OtherKey="Role_ID")]
		public EntitySet<RolePermission> RolePermissions
		{
			get
			{
				return this._RolePermissions;
			}
			set
			{
				this._RolePermissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRole", Storage="_UserRoles", ThisKey="Role_ID", OtherKey="Role_ID")]
		public EntitySet<UserRole> UserRoles
		{
			get
			{
				return this._UserRoles;
			}
			set
			{
				this._UserRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RolePermissions(RolePermission entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_RolePermissions(RolePermission entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
		
		private void attach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RolePermission")]
	public partial class RolePermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _RolePer_ID;
		
		private string _Permission_ID;
		
		private string _Role_ID;
		
		private string _RolePer_Name;
		
		private EntitySet<ApplicationRole> _ApplicationRoles;
		
		private EntityRef<Permission> _Permission;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRolePer_IDChanging(string value);
    partial void OnRolePer_IDChanged();
    partial void OnPermission_IDChanging(string value);
    partial void OnPermission_IDChanged();
    partial void OnRole_IDChanging(string value);
    partial void OnRole_IDChanged();
    partial void OnRolePer_NameChanging(string value);
    partial void OnRolePer_NameChanged();
    #endregion
		
		public RolePermission()
		{
			this._ApplicationRoles = new EntitySet<ApplicationRole>(new Action<ApplicationRole>(this.attach_ApplicationRoles), new Action<ApplicationRole>(this.detach_ApplicationRoles));
			this._Permission = default(EntityRef<Permission>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RolePer_ID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RolePer_ID
		{
			get
			{
				return this._RolePer_ID;
			}
			set
			{
				if ((this._RolePer_ID != value))
				{
					this.OnRolePer_IDChanging(value);
					this.SendPropertyChanging();
					this._RolePer_ID = value;
					this.SendPropertyChanged("RolePer_ID");
					this.OnRolePer_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Permission_ID", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Permission_ID
		{
			get
			{
				return this._Permission_ID;
			}
			set
			{
				if ((this._Permission_ID != value))
				{
					if (this._Permission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermission_IDChanging(value);
					this.SendPropertyChanging();
					this._Permission_ID = value;
					this.SendPropertyChanged("Permission_ID");
					this.OnPermission_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role_ID", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Role_ID
		{
			get
			{
				return this._Role_ID;
			}
			set
			{
				if ((this._Role_ID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRole_IDChanging(value);
					this.SendPropertyChanging();
					this._Role_ID = value;
					this.SendPropertyChanged("Role_ID");
					this.OnRole_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RolePer_Name", DbType="VarChar(50)")]
		public string RolePer_Name
		{
			get
			{
				return this._RolePer_Name;
			}
			set
			{
				if ((this._RolePer_Name != value))
				{
					this.OnRolePer_NameChanging(value);
					this.SendPropertyChanging();
					this._RolePer_Name = value;
					this.SendPropertyChanged("RolePer_Name");
					this.OnRolePer_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RolePermission_ApplicationRole", Storage="_ApplicationRoles", ThisKey="RolePer_ID", OtherKey="RolePer_ID")]
		public EntitySet<ApplicationRole> ApplicationRoles
		{
			get
			{
				return this._ApplicationRoles;
			}
			set
			{
				this._ApplicationRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_RolePermission", Storage="_Permission", ThisKey="Permission_ID", OtherKey="Permission_ID", IsForeignKey=true)]
		public Permission Permission
		{
			get
			{
				return this._Permission.Entity;
			}
			set
			{
				Permission previousValue = this._Permission.Entity;
				if (((previousValue != value) 
							|| (this._Permission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permission.Entity = null;
						previousValue.RolePermissions.Remove(this);
					}
					this._Permission.Entity = value;
					if ((value != null))
					{
						value.RolePermissions.Add(this);
						this._Permission_ID = value.Permission_ID;
					}
					else
					{
						this._Permission_ID = default(string);
					}
					this.SendPropertyChanged("Permission");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RolePermission", Storage="_Role", ThisKey="Role_ID", OtherKey="Role_ID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.RolePermissions.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.RolePermissions.Add(this);
						this._Role_ID = value.Role_ID;
					}
					else
					{
						this._Role_ID = default(string);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ApplicationRoles(ApplicationRole entity)
		{
			this.SendPropertyChanging();
			entity.RolePermission = this;
		}
		
		private void detach_ApplicationRoles(ApplicationRole entity)
		{
			this.SendPropertyChanging();
			entity.RolePermission = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserAuthentication")]
	public partial class UserAuthentication : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserAuthen_ID;
		
		private string _UserAuthen_Name;
		
		private string _UserAuthen_Password;
		
		private EntitySet<UserRole> _UserRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserAuthen_IDChanging(string value);
    partial void OnUserAuthen_IDChanged();
    partial void OnUserAuthen_NameChanging(string value);
    partial void OnUserAuthen_NameChanged();
    partial void OnUserAuthen_PasswordChanging(string value);
    partial void OnUserAuthen_PasswordChanged();
    #endregion
		
		public UserAuthentication()
		{
			this._UserRoles = new EntitySet<UserRole>(new Action<UserRole>(this.attach_UserRoles), new Action<UserRole>(this.detach_UserRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAuthen_ID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserAuthen_ID
		{
			get
			{
				return this._UserAuthen_ID;
			}
			set
			{
				if ((this._UserAuthen_ID != value))
				{
					this.OnUserAuthen_IDChanging(value);
					this.SendPropertyChanging();
					this._UserAuthen_ID = value;
					this.SendPropertyChanged("UserAuthen_ID");
					this.OnUserAuthen_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAuthen_Name", DbType="VarChar(50)")]
		public string UserAuthen_Name
		{
			get
			{
				return this._UserAuthen_Name;
			}
			set
			{
				if ((this._UserAuthen_Name != value))
				{
					this.OnUserAuthen_NameChanging(value);
					this.SendPropertyChanging();
					this._UserAuthen_Name = value;
					this.SendPropertyChanged("UserAuthen_Name");
					this.OnUserAuthen_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAuthen_Password", DbType="VarChar(50)")]
		public string UserAuthen_Password
		{
			get
			{
				return this._UserAuthen_Password;
			}
			set
			{
				if ((this._UserAuthen_Password != value))
				{
					this.OnUserAuthen_PasswordChanging(value);
					this.SendPropertyChanging();
					this._UserAuthen_Password = value;
					this.SendPropertyChanged("UserAuthen_Password");
					this.OnUserAuthen_PasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAuthentication_UserRole", Storage="_UserRoles", ThisKey="UserAuthen_ID", OtherKey="UserAuthen_ID")]
		public EntitySet<UserRole> UserRoles
		{
			get
			{
				return this._UserRoles;
			}
			set
			{
				this._UserRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.UserAuthentication = this;
		}
		
		private void detach_UserRoles(UserRole entity)
		{
			this.SendPropertyChanging();
			entity.UserAuthentication = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRole")]
	public partial class UserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserRole_ID;
		
		private string _Role_ID;
		
		private string _UserAuthen_ID;
		
		private string _UserRole_Name;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<UserAuthentication> _UserAuthentication;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserRole_IDChanging(string value);
    partial void OnUserRole_IDChanged();
    partial void OnRole_IDChanging(string value);
    partial void OnRole_IDChanged();
    partial void OnUserAuthen_IDChanging(string value);
    partial void OnUserAuthen_IDChanged();
    partial void OnUserRole_NameChanging(string value);
    partial void OnUserRole_NameChanged();
    #endregion
		
		public UserRole()
		{
			this._Role = default(EntityRef<Role>);
			this._UserAuthentication = default(EntityRef<UserAuthentication>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserRole_ID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserRole_ID
		{
			get
			{
				return this._UserRole_ID;
			}
			set
			{
				if ((this._UserRole_ID != value))
				{
					this.OnUserRole_IDChanging(value);
					this.SendPropertyChanging();
					this._UserRole_ID = value;
					this.SendPropertyChanged("UserRole_ID");
					this.OnUserRole_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role_ID", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Role_ID
		{
			get
			{
				return this._Role_ID;
			}
			set
			{
				if ((this._Role_ID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRole_IDChanging(value);
					this.SendPropertyChanging();
					this._Role_ID = value;
					this.SendPropertyChanged("Role_ID");
					this.OnRole_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAuthen_ID", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string UserAuthen_ID
		{
			get
			{
				return this._UserAuthen_ID;
			}
			set
			{
				if ((this._UserAuthen_ID != value))
				{
					if (this._UserAuthentication.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserAuthen_IDChanging(value);
					this.SendPropertyChanging();
					this._UserAuthen_ID = value;
					this.SendPropertyChanged("UserAuthen_ID");
					this.OnUserAuthen_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserRole_Name", DbType="VarChar(50)")]
		public string UserRole_Name
		{
			get
			{
				return this._UserRole_Name;
			}
			set
			{
				if ((this._UserRole_Name != value))
				{
					this.OnUserRole_NameChanging(value);
					this.SendPropertyChanging();
					this._UserRole_Name = value;
					this.SendPropertyChanged("UserRole_Name");
					this.OnUserRole_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRole", Storage="_Role", ThisKey="Role_ID", OtherKey="Role_ID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.UserRoles.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.UserRoles.Add(this);
						this._Role_ID = value.Role_ID;
					}
					else
					{
						this._Role_ID = default(string);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAuthentication_UserRole", Storage="_UserAuthentication", ThisKey="UserAuthen_ID", OtherKey="UserAuthen_ID", IsForeignKey=true)]
		public UserAuthentication UserAuthentication
		{
			get
			{
				return this._UserAuthentication.Entity;
			}
			set
			{
				UserAuthentication previousValue = this._UserAuthentication.Entity;
				if (((previousValue != value) 
							|| (this._UserAuthentication.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAuthentication.Entity = null;
						previousValue.UserRoles.Remove(this);
					}
					this._UserAuthentication.Entity = value;
					if ((value != null))
					{
						value.UserRoles.Add(this);
						this._UserAuthen_ID = value.UserAuthen_ID;
					}
					else
					{
						this._UserAuthen_ID = default(string);
					}
					this.SendPropertyChanged("UserAuthentication");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ApplicationRole")]
	public partial class ApplicationRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AppRole_ID;
		
		private string _AppMenu_ID;
		
		private string _RolePer_ID;
		
		private string _AppRole_Name;
		
		private string _AppRole_Des;
		
		private EntityRef<RolePermission> _RolePermission;
		
		private EntityRef<ApplicationMenu> _ApplicationMenu;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAppRole_IDChanging(string value);
    partial void OnAppRole_IDChanged();
    partial void OnAppMenu_IDChanging(string value);
    partial void OnAppMenu_IDChanged();
    partial void OnRolePer_IDChanging(string value);
    partial void OnRolePer_IDChanged();
    partial void OnAppRole_NameChanging(string value);
    partial void OnAppRole_NameChanged();
    partial void OnAppRole_DesChanging(string value);
    partial void OnAppRole_DesChanged();
    #endregion
		
		public ApplicationRole()
		{
			this._RolePermission = default(EntityRef<RolePermission>);
			this._ApplicationMenu = default(EntityRef<ApplicationMenu>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppRole_ID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AppRole_ID
		{
			get
			{
				return this._AppRole_ID;
			}
			set
			{
				if ((this._AppRole_ID != value))
				{
					this.OnAppRole_IDChanging(value);
					this.SendPropertyChanging();
					this._AppRole_ID = value;
					this.SendPropertyChanged("AppRole_ID");
					this.OnAppRole_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppMenu_ID", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string AppMenu_ID
		{
			get
			{
				return this._AppMenu_ID;
			}
			set
			{
				if ((this._AppMenu_ID != value))
				{
					if (this._ApplicationMenu.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAppMenu_IDChanging(value);
					this.SendPropertyChanging();
					this._AppMenu_ID = value;
					this.SendPropertyChanged("AppMenu_ID");
					this.OnAppMenu_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RolePer_ID", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string RolePer_ID
		{
			get
			{
				return this._RolePer_ID;
			}
			set
			{
				if ((this._RolePer_ID != value))
				{
					if (this._RolePermission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRolePer_IDChanging(value);
					this.SendPropertyChanging();
					this._RolePer_ID = value;
					this.SendPropertyChanged("RolePer_ID");
					this.OnRolePer_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppRole_Name", DbType="VarChar(50)")]
		public string AppRole_Name
		{
			get
			{
				return this._AppRole_Name;
			}
			set
			{
				if ((this._AppRole_Name != value))
				{
					this.OnAppRole_NameChanging(value);
					this.SendPropertyChanging();
					this._AppRole_Name = value;
					this.SendPropertyChanged("AppRole_Name");
					this.OnAppRole_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppRole_Des", DbType="VarChar(50)")]
		public string AppRole_Des
		{
			get
			{
				return this._AppRole_Des;
			}
			set
			{
				if ((this._AppRole_Des != value))
				{
					this.OnAppRole_DesChanging(value);
					this.SendPropertyChanging();
					this._AppRole_Des = value;
					this.SendPropertyChanged("AppRole_Des");
					this.OnAppRole_DesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RolePermission_ApplicationRole", Storage="_RolePermission", ThisKey="RolePer_ID", OtherKey="RolePer_ID", IsForeignKey=true)]
		public RolePermission RolePermission
		{
			get
			{
				return this._RolePermission.Entity;
			}
			set
			{
				RolePermission previousValue = this._RolePermission.Entity;
				if (((previousValue != value) 
							|| (this._RolePermission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RolePermission.Entity = null;
						previousValue.ApplicationRoles.Remove(this);
					}
					this._RolePermission.Entity = value;
					if ((value != null))
					{
						value.ApplicationRoles.Add(this);
						this._RolePer_ID = value.RolePer_ID;
					}
					else
					{
						this._RolePer_ID = default(string);
					}
					this.SendPropertyChanged("RolePermission");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApplicationMenu_ApplicationRole", Storage="_ApplicationMenu", ThisKey="AppMenu_ID", OtherKey="AppMenu_ID", IsForeignKey=true)]
		public ApplicationMenu ApplicationMenu
		{
			get
			{
				return this._ApplicationMenu.Entity;
			}
			set
			{
				ApplicationMenu previousValue = this._ApplicationMenu.Entity;
				if (((previousValue != value) 
							|| (this._ApplicationMenu.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ApplicationMenu.Entity = null;
						previousValue.ApplicationRoles.Remove(this);
					}
					this._ApplicationMenu.Entity = value;
					if ((value != null))
					{
						value.ApplicationRoles.Add(this);
						this._AppMenu_ID = value.AppMenu_ID;
					}
					else
					{
						this._AppMenu_ID = default(string);
					}
					this.SendPropertyChanged("ApplicationMenu");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Applicationss")]
	public partial class Applicationss : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Application_Code;
		
		private string _Application_Name;
		
		private string _Application_URL;
		
		private string _Application_Des;
		
		private string _Application_Status;
		
		private EntitySet<ApplicationMenu> _ApplicationMenus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplication_CodeChanging(string value);
    partial void OnApplication_CodeChanged();
    partial void OnApplication_NameChanging(string value);
    partial void OnApplication_NameChanged();
    partial void OnApplication_URLChanging(string value);
    partial void OnApplication_URLChanged();
    partial void OnApplication_DesChanging(string value);
    partial void OnApplication_DesChanged();
    partial void OnApplication_StatusChanging(string value);
    partial void OnApplication_StatusChanged();
    #endregion
		
		public Applicationss()
		{
			this._ApplicationMenus = new EntitySet<ApplicationMenu>(new Action<ApplicationMenu>(this.attach_ApplicationMenus), new Action<ApplicationMenu>(this.detach_ApplicationMenus));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Application_Code", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Application_Code
		{
			get
			{
				return this._Application_Code;
			}
			set
			{
				if ((this._Application_Code != value))
				{
					this.OnApplication_CodeChanging(value);
					this.SendPropertyChanging();
					this._Application_Code = value;
					this.SendPropertyChanged("Application_Code");
					this.OnApplication_CodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Application_Name", DbType="VarChar(50)")]
		public string Application_Name
		{
			get
			{
				return this._Application_Name;
			}
			set
			{
				if ((this._Application_Name != value))
				{
					this.OnApplication_NameChanging(value);
					this.SendPropertyChanging();
					this._Application_Name = value;
					this.SendPropertyChanged("Application_Name");
					this.OnApplication_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Application_URL", DbType="VarChar(50)")]
		public string Application_URL
		{
			get
			{
				return this._Application_URL;
			}
			set
			{
				if ((this._Application_URL != value))
				{
					this.OnApplication_URLChanging(value);
					this.SendPropertyChanging();
					this._Application_URL = value;
					this.SendPropertyChanged("Application_URL");
					this.OnApplication_URLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Application_Des", DbType="VarChar(50)")]
		public string Application_Des
		{
			get
			{
				return this._Application_Des;
			}
			set
			{
				if ((this._Application_Des != value))
				{
					this.OnApplication_DesChanging(value);
					this.SendPropertyChanging();
					this._Application_Des = value;
					this.SendPropertyChanged("Application_Des");
					this.OnApplication_DesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Application_Status", DbType="VarChar(10)")]
		public string Application_Status
		{
			get
			{
				return this._Application_Status;
			}
			set
			{
				if ((this._Application_Status != value))
				{
					this.OnApplication_StatusChanging(value);
					this.SendPropertyChanging();
					this._Application_Status = value;
					this.SendPropertyChanged("Application_Status");
					this.OnApplication_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Applicationss_ApplicationMenu", Storage="_ApplicationMenus", ThisKey="Application_Code", OtherKey="Application_Code")]
		public EntitySet<ApplicationMenu> ApplicationMenus
		{
			get
			{
				return this._ApplicationMenus;
			}
			set
			{
				this._ApplicationMenus.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ApplicationMenus(ApplicationMenu entity)
		{
			this.SendPropertyChanging();
			entity.Applicationss = this;
		}
		
		private void detach_ApplicationMenus(ApplicationMenu entity)
		{
			this.SendPropertyChanging();
			entity.Applicationss = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ApplicationMenu")]
	public partial class ApplicationMenu : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AppMenu_ID;
		
		private string _AppMenu_Name;
		
		private string _Application_Code;
		
		private EntitySet<ApplicationRole> _ApplicationRoles;
		
		private EntityRef<Applicationss> _Applicationss;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAppMenu_IDChanging(string value);
    partial void OnAppMenu_IDChanged();
    partial void OnAppMenu_NameChanging(string value);
    partial void OnAppMenu_NameChanged();
    partial void OnApplication_CodeChanging(string value);
    partial void OnApplication_CodeChanged();
    #endregion
		
		public ApplicationMenu()
		{
			this._ApplicationRoles = new EntitySet<ApplicationRole>(new Action<ApplicationRole>(this.attach_ApplicationRoles), new Action<ApplicationRole>(this.detach_ApplicationRoles));
			this._Applicationss = default(EntityRef<Applicationss>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppMenu_ID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AppMenu_ID
		{
			get
			{
				return this._AppMenu_ID;
			}
			set
			{
				if ((this._AppMenu_ID != value))
				{
					this.OnAppMenu_IDChanging(value);
					this.SendPropertyChanging();
					this._AppMenu_ID = value;
					this.SendPropertyChanged("AppMenu_ID");
					this.OnAppMenu_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppMenu_Name", DbType="VarChar(50)")]
		public string AppMenu_Name
		{
			get
			{
				return this._AppMenu_Name;
			}
			set
			{
				if ((this._AppMenu_Name != value))
				{
					this.OnAppMenu_NameChanging(value);
					this.SendPropertyChanging();
					this._AppMenu_Name = value;
					this.SendPropertyChanged("AppMenu_Name");
					this.OnAppMenu_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Application_Code", DbType="VarChar(10)")]
		public string Application_Code
		{
			get
			{
				return this._Application_Code;
			}
			set
			{
				if ((this._Application_Code != value))
				{
					if (this._Applicationss.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplication_CodeChanging(value);
					this.SendPropertyChanging();
					this._Application_Code = value;
					this.SendPropertyChanged("Application_Code");
					this.OnApplication_CodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ApplicationMenu_ApplicationRole", Storage="_ApplicationRoles", ThisKey="AppMenu_ID", OtherKey="AppMenu_ID")]
		public EntitySet<ApplicationRole> ApplicationRoles
		{
			get
			{
				return this._ApplicationRoles;
			}
			set
			{
				this._ApplicationRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Applicationss_ApplicationMenu", Storage="_Applicationss", ThisKey="Application_Code", OtherKey="Application_Code", IsForeignKey=true)]
		public Applicationss Applicationss
		{
			get
			{
				return this._Applicationss.Entity;
			}
			set
			{
				Applicationss previousValue = this._Applicationss.Entity;
				if (((previousValue != value) 
							|| (this._Applicationss.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Applicationss.Entity = null;
						previousValue.ApplicationMenus.Remove(this);
					}
					this._Applicationss.Entity = value;
					if ((value != null))
					{
						value.ApplicationMenus.Add(this);
						this._Application_Code = value.Application_Code;
					}
					else
					{
						this._Application_Code = default(string);
					}
					this.SendPropertyChanged("Applicationss");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ApplicationRoles(ApplicationRole entity)
		{
			this.SendPropertyChanging();
			entity.ApplicationMenu = this;
		}
		
		private void detach_ApplicationRoles(ApplicationRole entity)
		{
			this.SendPropertyChanging();
			entity.ApplicationMenu = null;
		}
	}
}
#pragma warning restore 1591
